/*
 * FinalizaProvasServlet.java
 *
 * Version: $Revision: 1.0 $
 *
 * Date: $Date: 2016-01-27 $
 *
 * Copyright (c) 2016, SIBUC, University de Coimbra.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * - Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * - Neither the name of the Hewlett-Packard Company nor the name of the
 * Massachusetts Institute of Technology nor the names of their
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STsent_email_pedido_copia:RICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
 * DAMAGE.
 */

package pt.ucoimbra.sibuc.dspace.servlet;

import java.io.IOException;
import java.sql.SQLException;
import java.net.URLEncoder;
import java.util.Date;
import java.util.Locale;
import java.util.ArrayList;
import javax.mail.MessagingException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;

import java.text.SimpleDateFormat;
import java.text.DateFormat;

import org.dspace.app.webui.servlet.DSpaceServlet;
import org.dspace.app.webui.util.JSPManager;
import org.dspace.authorize.AuthorizeException;
import org.dspace.content.Bitstream;
import org.dspace.content.Bundle;
import org.dspace.core.ConfigurationManager;
import org.dspace.core.Context;
import org.dspace.core.I18nUtil;
import org.dspace.core.Email;
import org.dspace.core.LogManager;
import org.dspace.core.Constants;
import org.dspace.eperson.EPerson;
import org.dspace.handle.HandleManager;
import org.dspace.content.Item;
import org.dspace.content.ItemIterator;
import org.dspace.content.Collection;
import org.dspace.content.Metadatum;
import org.dspace.storage.rdbms.DatabaseManager;
import org.dspace.storage.rdbms.TableRow;
import org.dspace.app.webui.util.UIUtil;
import org.dspace.storage.bitstore.BitstreamStorageManager;


/**
 * Servlet for sending paper copy requests to academic department
 *
 * @author  Ana Luisa Silva
 * @version $Revision: 1.0 $
 */
public class FinalizaProvasServlet extends DSpaceServlet
{
    /** log4j category */
    private static Logger log = Logger.getLogger(FinalizaProvasServlet.class);
    
    public static final String DOUTORAMENTO = "doctoralThesis";

   
    protected void doDSGet(Context context,
        HttpServletRequest request,
        HttpServletResponse response)
        throws ServletException, IOException, SQLException, AuthorizeException
    {


          processForm(context, request, response);


    }

    protected void doDSPost(Context context,
        HttpServletRequest request,
        HttpServletResponse response)
        throws ServletException, IOException, SQLException, AuthorizeException
    {
        // Treat as a GET
        doDSGet(context, request, response);
    }
 
    private void processForm (Context context,
        HttpServletRequest request,
        HttpServletResponse response)
        throws ServletException, IOException, SQLException, AuthorizeException
    {        
        
       log.info("Process-form");
       // handle
       String handle = request.getParameter("handle");
  
       // inicializa variaveis a recolher
       String thesis_renates_id = null;  
       String thesis_degree_discipline_id = null;
       String thesis_financiamento = null;
       String thesis_date_embargo = null;       
       // inicializa variaveis a preencher automaticamente ou calcular
       String thesis_degree_name = null;
       String thesis_degree_level = "doutor";
       String thesis_peerreview = "yes";
       Metadatum[] thesis_degree_grantor = null;
       Metadatum[] thesis_degree_grantor_unit = null;     
       String thesis_author_mail = null;
       String thesis_author_name = null;
       String thesis_author_id = null;
       String thesis_subject_fos = null;
       String[] thesis_contributor_advisors = null;
       String[] thesis_contributor_advisors_id = null;
       String[] thesis_contributor_advisors_email = null;
       String[] thesis_juri = null;
       String datadefesa = null;
       String thesis_degree_classification = null;
       String thesis_date_embargo_end_date = null;
       ItemIterator item = null;
       Item curr_item = null;
       Collection collection = null;
       String collection_name = null;
       if (handle != null && !handle.equals(""))
        {
          collection  = (Collection) HandleManager.resolveToObject(context, handle);
          collection_name = collection.getName();
          thesis_degree_name = collection.getMetadata("dc.description.abstract");
          thesis_degree_grantor = collection.getMetadataByMetadataString("collection.idIES.dges");
          thesis_degree_grantor_unit = collection.getMetadataByMetadataString("collection.faculdade");
          item = collection.getAllItems();
          while (item.hasNext()) {
            curr_item=item.next();
            if (curr_item.getMetadata("dc.type").equals(DOUTORAMENTO)) {
             if (request.getParameter("submit") != null) {
              // parametros recolhidos ou j√° preenchidos
               thesis_renates_id = request.getParameter("renates_id");
              // thesis_degree_grantor = request.getParameterValues("degree_grantor");
              // thesis_degree_grantor_unit = request.getParameter("degree_grantor_unit");
               thesis_degree_level = "doutor";
               thesis_degree_name = request.getParameter("thesis_degree_name");
               thesis_degree_discipline_id = request.getParameter("thesis_degree_discipline_id");
               thesis_author_mail = request.getParameter("thesis_author_mail");
               thesis_author_name = request.getParameter("thesis_author_name");
               thesis_author_id = request.getParameter("thesis_author_id");
               thesis_subject_fos = request.getParameter("thesis_subject_fos");
               thesis_contributor_advisors = request.getParameterValues("contributor_advisors");
               thesis_contributor_advisors_id = request.getParameterValues("contributor_advisors_id");
               thesis_juri = request.getParameterValues("juri");
               datadefesa = request.getParameter("datadefesa");
               thesis_degree_classification = request.getParameter("degree_classification");
               thesis_financiamento = request.getParameter("financiamento");
               thesis_date_embargo = request.getParameter("date_embargo");
               thesis_date_embargo_end_date = request.getParameter("date_embargo_end_date");
               //Testa se obteve todos os dados relevantes
               boolean dados_completos = true;
               if (thesis_renates_id!=null) {
                  curr_item.clearMetadata("dc", "identifier", "tid", Item.ANY);
                  curr_item.addMetadata("dc", "identifier", "tid", Item.ANY, thesis_renates_id);
               } else dados_completos = false;
               if (thesis_degree_grantor!=null) {
                  curr_item.clearMetadata("thesis", "degree", "grantor", Item.ANY);
                //  curr_item.addMetadata("thesis", "degree", "grantor", Item.ANY, thesis_degree_grantor);
               } else dados_completos = false;                   
               if (thesis_degree_grantor_unit!=null) {
                  curr_item.clearMetadata("thesis", "degree", "grantorUnit", Item.ANY);
                //  curr_item.addMetadata("thesis", "degree", "grantorUnit", Item.ANY, thesis_degree_grantor_unit);
               }  else dados_completos = false;
               // degree level eh sempre doutor...
               curr_item.clearMetadata("thesis", "degree", "level", Item.ANY);
               curr_item.addMetadata("thesis", "degree", "level", Item.ANY, thesis_degree_level);
               if (thesis_degree_name!=null) {
                  curr_item.clearMetadata("thesis", "degree", "name", Item.ANY);
                  curr_item.addMetadata("thesis", "degree", "name", Item.ANY, thesis_degree_name);
               }  else dados_completos = false;
               if (thesis_degree_discipline_id!=null) {
                  curr_item.clearMetadata("thesis", "degree", "disciplineID", Item.ANY);
                  curr_item.addMetadata("thesis", "degree", "disciplineID", Item.ANY, thesis_degree_discipline_id);
               }  else dados_completos = false;               
            //   if (thesis_author_mail!=null) {
            //      curr_item.clearMetadata("thesis", "degree", "disciplineID", Item.ANY);
            //      curr_item.addMetadata("thesis", "degree", "disciplineID", Item.ANY, thesis_author_mail);
            //   }  else dados_completos = false; 
            //   if (thesis_author_if!=null) {
            //      curr_item.clearMetadata("thesis", "degree", "disciplineID", Item.ANY);
            //      curr_item.addMetadata("thesis", "degree", "disciplineID", Item.ANY, thesis_author_mail);
            //   }  else dados_completos = false;  
               if (thesis_author_name!=null) {
                  curr_item.clearMetadata("dc", "contributor", "author", Item.ANY);
                  curr_item.addMetadata("dc", "contributor", "author", Item.ANY, thesis_author_name);
               }  else dados_completos = false;               
               if (thesis_subject_fos!=null) {
                  curr_item.clearMetadata("dc", "subject", "fos", Item.ANY);
                  curr_item.addMetadata("dc", "subject", "fos", Item.ANY, thesis_subject_fos);
               }  else dados_completos = false; 
               if (thesis_contributor_advisors!=null){
                   curr_item.clearMetadata("dc", "contibutor", "advisor", Item.ANY);
                   for (int i=0; i<thesis_contributor_advisors.length; i++)
                   {
                     curr_item.addMetadata("dc", "contibutor", "advisor", Item.ANY, thesis_contributor_advisors[i]);                 
                     // deve tamb√©m ser atualizada a informa√ß√£o de identifica√ß√£o e contacto + ORCID
                   }
               } else dados_completos = false;
               
               // Caso tenha obtido todos os dados, faz a migracao
               if (dados_completos) {
                  migra_tese_area_publica(context, request, response, curr_item,collection);       
               }
               else
                // Caso contr√°rio volta a mostrar o formulario
                form_tese_area_publica(context, request, response, curr_item,collection);                        
             } else
             {
               // Pede formulario para completar dados
               // identifica aluno e recolhe email
               thesis_author_name = curr_item.getMetadata("dc.contributor,author");
               thesis_subject_fos = curr_item.getMetadata("dc.subject.fos");
               EPerson author = curr_item.getSubmitter();
               if (curr_item.getMetadata("dc.relation").contains("info-repo")) 
                   thesis_financiamento = curr_item.getMetadata("dc.relation");
               if (curr_item.getMetadata("dc.date.embargo")!=null)
                   thesis_date_embargo = curr_item.getMetadata("dc.date.embargo");
               // verifica se o aluno √© o depositante
               String netID = author.getNetid();
               if (netID.contains("student")) {
                   // o aluno √© o depositante
                   thesis_author_mail = author.getEmail();
                   thesis_author_id = author.getMetadata("eperson.identifier.uc");
                   if (thesis_author_id==null || thesis_author_id=="") {
                         thesis_author_id = netID.substring(0, netID.indexOf("@")-1);
                         author.addMetadata("eperson", "identifier", "uc", null, thesis_author_id);
                         author.update();
                 }
               }  // deposito efetuado pelos servi√ßos, tem que pedir n¬∫ do aluno...
               request.setAttribute("handle",handle);
               request.setAttribute("item",curr_item);
               request.setAttribute("collection_name",collection_name);
               request.setAttribute("thesis_degree_name",thesis_degree_name);
               request.setAttribute("thesis_degree_grantor", thesis_degree_grantor);
               request.setAttribute("thesis_degree_grantor_unit",thesis_degree_grantor_unit);
               request.setAttribute("thesis_renates_id",thesis_renates_id);
               request.setAttribute("thesis_degree_discipline_id",thesis_degree_discipline_id);
               request.setAttribute("thesis_financiamento",thesis_financiamento);
               request.setAttribute("thesis_author_mail",thesis_author_mail );
               request.setAttribute("thesis_author_name", thesis_author_name);
               request.setAttribute("thesis_author_id", thesis_author_id);

                JSPManager.showJSP(request, response, "/academicos/migraProvas-form.jsp");
                return;
               }
            }
       

//        =======================================

        // User email from context

        EPerson currentUser = context.getCurrentUser();
        String userName = null;
        String authEmail = null;
        String membrojuri = null;
        String emailmembrojuri = null;
        if (currentUser != null)
        {
            authEmail = currentUser.getEmail();
            userName = currentUser.getFullName();
        }
        
        
        if (request.getParameter("submit") != null)
        {
            log.info("submit - processForm");
            membrojuri = request.getParameter("membrojuri");
            emailmembrojuri = request.getParameter("emailmembrojuri");
            title = request.getParameter("title");
            handle = request.getParameter("handle");
            if (membrojuri == null || membrojuri.equals(""))
                membrojuri = "";
           if (emailmembrojuri == null || emailmembrojuri.equals(""))
                emailmembrojuri = "";
                        
            // Check all data is there
            if (membrojuri == null || membrojuri.equals("") || emailmembrojuri == null || emailmembrojuri.equals(""))
            {
                request.setAttribute("item-handle",handle);
                request.setAttribute("membrojuri", membrojuri);
                request.setAttribute("emailmembrojuri", emailmembrojuri);
                request.setAttribute("authEmail", authEmail);
                request.setAttribute("userName", userName);
                request.setAttribute("title", title); 
                request.setAttribute("collection_name", collection_name);
                JSPManager.showJSP(request, response, "/pedirCopia/pedirCopia-form.jsp");
                return;
            }

            // All data is there, send the email
            // get submiter email
            //EPerson submiter = item.getSubmitter();
           log.info("all data is there; reencaminha para pedirCopia-form");
            //get email 
            try
            {

                            // Get the Locale
            Locale supportedLocale = I18nUtil.getEPersonLocale(currentUser);
            Email email = Email.getEmail(I18nUtil.getEmailFilename(supportedLocale, "pedir_copia_papel"));
            String academicos_email = ConfigurationManager.getProperty("mail.academicos");

            email.addRecipient("als@uc.pt");
            // email.addRecipient(academicos_email);
            email.setCharset("UTF-8");
            email.addArgument(new Date());
            email.addArgument(collection_name);
            email.addArgument(title);
            email.addArgument(handle);
            email.addArgument(membrojuri);
            email.addArgument(emailmembrojuri);
            email.addArgument(userName);
            email.send();

          
                log.info(LogManager.getHeader(context,
                    "sent_email_pedido_copia",
                    ",destinatario=" + emailmembrojuri
                        + ",colecao="+collection_name
                        + ",titulo="+title));
                request.setAttribute("item-handle",handle);
                JSPManager.showJSP(request, response,
                    "/pedirCopia/pedido_concluido.jsp");
                return;
            }
            catch (MessagingException me)
            {
                log.warn(LogManager.getHeader(context,
                    "error_mailing_pedirCopia",
                    ""), me);
               JSPManager.showInternalError(request, response);
               return;
            }
        }
        else
        {
            // Display sugget form
            log.info(LogManager.getHeader(context,
                "show_pedirCopia_form",
                "=inicio"));
                request.setAttribute("item-handle",handle);
                request.setAttribute("membrojuri", membrojuri);
                request.setAttribute("emailmembrojuri", emailmembrojuri);
                request.setAttribute("authEmail", authEmail);
                request.setAttribute("userName", userName);
                request.setAttribute("title", title);
                request.setAttribute("collection_name", collection_name);

            JSPManager.showJSP(request, response, "/pedirCopia/pedirCopia-form.jsp");

            return;
        }
   }

 }       
    private void form_tese_area_publica(Context context,
        HttpServletRequest request,
        HttpServletResponse response, Item curr_item,Collection collection)
        throws ServletException, IOException, SQLException, AuthorizeException
    {
        int id_renates = 0;
        
                    // Display sugget form
            log.info(LogManager.getHeader(context,"form_tese_area_public","inicio"));
            
                request.setAttribute("collection",collection);
                request.setAttribute("item", curr_item);
                request.setAttribute("membrojuri", membrojuri);
                request.setAttribute("emailmembrojuri", emailmembrojuri);
                request.setAttribute("authEmail", authEmail);
                request.setAttribute("userName", userName);
                request.setAttribute("title", title);
                request.setAttribute("collection_name", collection_name);

            JSPManager.showJSP(request, response, "/pedirCopia/pedirCopia-form.jsp");

            return;
    }

    private void migra_tese_area_publica(Context context,
        HttpServletRequest request,
        HttpServletResponse response, Item curr_item,Collection collection)
        throws ServletException, IOException, SQLException, AuthorizeException
    {
        log.info("Resume request");
        String handle = request.getParameter("item-handle");

        String url1 = null;
        String prefix1 = "/handle/" + handle;

            url1 = request.getContextPath()+ prefix1;
        log.info("url1 - " + url1);
            request.getRequestDispatcher(url1).forward(request,response);
            
        return;
    }

}
